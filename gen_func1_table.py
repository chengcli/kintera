#!/usr/bin/env python3
import re
from pathlib import Path

# Regex to find VAPOR_FUNCTION(name, var)
VAPOR_PATTERN = re.compile(r'\bVAPOR_FUNCTION\s*\(\s*([a-zA-Z_][\w]*)\s*,\s*[a-zA-Z_][\w]*\s*\)')

TEMPLATE = """\
// Auto-generated by gen_func1_table.py

// base
#include <configure.h>

using user_func1 = double (*)(double);

{declarations}

__device__ user_func1 func1_table[] = {{
{pointers}
}};

__device__ __constant__ user_func1* func1_table_device_ptr = func1_table;
"""

DECLARATION_TEMPLATE = "DISPATCH_MACRO extern double {name}(double);"
POINTER_TEMPLATE = "    {name}"

def extract_vapor_functions(text: str) -> list[str]:
    """Extract function names registered via VAPOR_FUNCTION macro."""
    return VAPOR_PATTERN.findall(text)

def generate_code(func_names: list[str]) -> str:
    """Generate the full device pointer table source."""
    declarations = "\n".join(DECLARATION_TEMPLATE.format(name=f) for f in func_names)
    pointers = ",\n".join(POINTER_TEMPLATE.format(name=f) for f in func_names)
    return TEMPLATE.format(declarations=declarations, pointers=pointers)

def main():
    vapor_funcs = Path('src/vapors/vapor_functions.cpp')
    output = Path('src/func1_table.cu')

    vapor_funcs_text = vapor_funcs.read_text()
    func_names = extract_vapor_functions(vapor_funcs_text)

    if not func_names:
        print(f"No VAPOR_FUNCTION definitions found in {vapor_funcs}")
        return

    output_code = generate_code(func_names)
    output.write_text(output_code)
    print(f"Generated {len(func_names)} function pointer(s) to {output}")

if __name__ == "__main__":
    main()

